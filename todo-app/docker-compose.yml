# COMMIT 13: Adiciona docker-compose.yml
version: '3.8'

services:
  # Serviço do banco de dados PostgreSQL
  db:
    image: postgres:16-alpine # Imagem oficial do PostgreSQL
    container_name: todoapp_db
    environment:
      POSTGRES_DB: todoapp # Nome do banco de dados
      POSTGRES_USER: postgres # Usuário do banco de dados
      POSTGRES_PASSWORD: SUA_SENHA_POSTGRES # Senha do banco de dados (MUDE PARA UMA SENHA SEGURA EM PRODUÇÃO!)
    ports:
      - "5432:5432" # Mapeia a porta do contêiner para a porta local
    volumes:
      - db_data:/var/lib/postgresql/data # Persiste os dados do banco
    healthcheck: # Verifica se o banco de dados está pronto
      test: ["CMD-SHELL", "pg_isready -U postgres -d todoapp"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Serviço do backend Spring Boot
  backend:
    build: ./backend # Constrói a imagem a partir do Dockerfile na pasta backend
    container_name: todoapp_backend
    ports:
      - "8080:8080" # Mapeia a porta do contêiner para a porta local
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/todoapp # URL do banco de dados (usa o nome do serviço 'db')
      SPRING_DATASOURCE_USERNAME: postgres # Usuário do banco de dados
      SPRING_DATASOURCE_PASSWORD: todoapp123 # Senha do banco de dados
      SPRING_JPA_HIBERNATE_DDL_AUTO: update # Permite que o Hibernate crie/atualize as tabelas
      SPRING_WEB_CORS_ALLOWED_ORIGINS: http://localhost:3000,http://localhost:80 # Permite CORS do frontend
    depends_on:
      db:
        condition: service_healthy # Garante que o banco esteja saudável antes de iniciar o backend
    restart: on-failure # Reinicia o contêiner se ele falhar

  # Serviço do frontend Next.js
  frontend:
    build: ./frontend # Constrói a imagem a partir do Dockerfile na pasta frontend
    container_name: todoapp_frontend
    ports:
      - "3000:3000" # Mapeia a porta do contêiner para a porta local
    environment:
      NEXT_PUBLIC_API_BASE_URL: http://localhost:8080/api/tarefas # URL da API do backend (para o frontend)
    depends_on:
      - backend # Garante que o backend esteja rodando antes de iniciar o frontend
    restart: on-failure # Reinicia o contêiner se ele falhar

volumes:
  db_data: # Define o volume para persistência dos dados do banco